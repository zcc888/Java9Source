package com.sun.tools.javah.resources;

public final class l10n extends java.util.ListResourceBundle {
    protected final Object[][] getContents() {
        return new Object[][] {
            { "at.args.cant.read", "Can''t read command line arguments from file {1}." },
            { "at.args.file.not.found", "Can''t find file {0}." },
            { "at.args.io.exception", "The following I/O problem was encountered when processing an @ argument on the command line: {0}." },
            { "bad.arg", "Bad argument: {0}" },
            { "cant.create.dir", "The directory {0} could not be create for output." },
            { "class.not.found", "Class {0} could not be found." },
            { "dir.file.mixed", "Can''t mix options -d and -o.  Try -help." },
            { "encoding.iso8859_1.not.found", "ISO8859_1 converter was not found for output.  This is probably due to an error in the installation installation." },
            { "err.cant.use.option.for.fm", "Can't use {0} option with given file manager" },
            { "err.internal.error", "Internal error: {0}" },
            { "err.ioerror", "IO error: {0}" },
            { "err.missing.arg", "value missing for {0}" },
            { "err.no.classes.specified", "no classes specified" },
            { "err.prefix", "Error:" },
            { "err.unknown.option", "unknown option: {0}" },
            { "invalid.method.signature", "Invalid method signature: {0}" },
            { "io.exception", "Can''t recover from an I/O error with the following message: {0}." },
            { "javah.fullVersion", "{0} full version \"{1}\"" },
            { "javah.misc.Deprecation", "\nWarning: The javah tool is planned to be removed in the next major\nJDK release. The tool has been superseded by the ''-h'' option added\nto javac in JDK 8. Users are recommended to migrate to using the\njavac ''-h'' option; see the javac man page for more information.\n" },
            { "javah.version", "{0} version \"{1}\"" },
            { "jni.llni.mixed", "Can''t mix options -jni and -llni.  Try -help." },
            { "jni.no.stubs", "JNI does not require stubs, please refer to the JNI documentation." },
            { "jni.sigerror", "Cannot determine signature for {0}" },
            { "jni.unknown.type", "An unknown type encountered (JNI)." },
            { "main.opt.bootclasspath", "  -bootclasspath <path>        Path from which to load bootstrap classes" },
            { "main.opt.class_path", "  --class-path <path>          Path from which to load classes" },
            { "main.opt.classpath", "  -classpath <path>            Path from which to load classes" },
            { "main.opt.cp", "  -cp <path>                   Path from which to load classes" },
            { "main.opt.d", "  -d <dir>                     Output directory" },
            { "main.opt.force", "  -force                       Always write output files" },
            { "main.opt.h", "  -h  --help  -?               Print this message" },
            { "main.opt.jni", "  -jni                         Generate JNI-style header file (default)" },
            { "main.opt.module_path", "  --module-path <path>         Path from which to load application modules" },
            { "main.opt.o", "  -o <file>                    Output file (only one of -d or -o may be used)" },
            { "main.opt.system", "  --system <jdk>               Specify where to find system modules" },
            { "main.opt.upgrade_module_path", "  --upgrade_module-path <path> Path from which to load application modules" },
            { "main.opt.v", "  -v  -verbose                 Enable verbose output" },
            { "main.opt.version", "  -version                     Print version information" },
            { "main.usage", "Usage: \n  javah [options] <classes>\nwhere [options] include:" },
            { "main.usage.foot", "\nGNU-style options may use '=' instead whitespace to separate the name of an option\nfrom its value.\n\nEach class must be specified by its fully qualified names, optionally\nprefixed by a module name followed by '/'. Examples:\n    java.lang.Object\n    java.base/java.io.File\n" },
            { "no.bootclasspath.specified", "No bootclasspath was specified on the command line.  Try -help." },
            { "no.classes.specified", "No classes were specified on the command line.  Try -help." },
            { "no.classpath.specified", "No classpath was specified on the command line.  Try -help." },
            { "no.outputdir.specified", "No output directory was specified on the command line.  Try -help." },
            { "no.outputfile.specified", "No outputfile was specified on the command line.  Try -help." },
            { "old.jni.mixed", "Can''t mix options -jni and -old.  Try -help." },
            { "old.llni.mixed", "Can''t mix options -old and -llni.  Try -help." },
            { "old.not.supported", "Option -old not supported by this version of javah." },
            { "super.class.not.found", "A required super class {0} could not be found." },
            { "tracing.not.supported", "Warning: Tracing is no longer supported.  Instead, use-verbose:jni option of the virtual machine." },
            { "tried.to.define.non.static", "Tried to generate #define for non-static field." },
            { "unknown.array.type", "An unknown array type encountered when generating old style headers." },
            { "unknown.option", "{0} is an illegal argument\n" },
            { "unknown.type.for.field", "An unknown type encountered when generating old style headers." },
            { "unknown.type.in.method.signature", "An unknown type eccountered when generating old style stubs." },
        };
    }
}
